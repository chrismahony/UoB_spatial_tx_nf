import os
from pathlib import Path
import sys
node_type = os.getenv('BB_CPU')
venv_dir = f'/rds/projects/g/gilberts-spatial-biology-image-analysis/Chris/my-virtual-env-icelake'  # edit this line to match the venv directory format
venv_site_pkgs = Path(venv_dir) / 'lib' / f'python{sys.version_info.major}.{sys.version_info.minor}' / 'site-packages'
if venv_site_pkgs.exists():
    sys.path.insert(0, str(venv_site_pkgs))
else:
    print(f"Path '{venv_site_pkgs}' not found. Check that it exists and/or that it exists for node-type '{node_type}'.")

import squidpy as sq
import matplotlib.pyplot as plt
import seaborn as sns
import scanpy as sc
import spatialdata as sd
from spatialdata_io import xenium
import spatialdata_plot
import dill
import anndata as ad
import pandas as pd
import geopandas as gpd
from shapely.geometry import MultiPoint
from shapely.ops import unary_union, triangulate
import os
import multiprocessing as mp
from tqdm import tqdm
import numpy as np
from scipy.sparse import csr_matrix

patient1_tx_file_path = sys.argv[1]
Patient1_tx_file = pd.read_csv(patient1_tx_file_path)

Patient1_tx_file['x'] = Patient1_tx_file['x_global_px']
Patient1_tx_file['y'] = Patient1_tx_file['y_global_px']
Patient1_tx_file['cell'] = Patient1_tx_file['cell_ID']
Patient1_tx_file['cell'] = Patient1_tx_file['cell_ID'].astype(str) + '_' + Patient1_tx_file['fov'].astype(str)
fovs = [Patient1_tx_file[Patient1_tx_file['fov'] == fov] for fov in Patient1_tx_file['fov'].unique()]

import geopandas as gpd
import pandas as pd
from shapely.geometry import MultiPoint
from shapely.ops import unary_union, triangulate


def cellgeoms_draw(segfile):
    # Calculate the number of transcripts per cell
    transcriptspercell = segfile.groupby('cell').size().reset_index(name='num_transcripts')
    
    # Filter cells with more than 5 transcripts
    cellidx = transcriptspercell[transcriptspercell['num_transcripts'] > 5]['cell'].unique()

    # Process each cell and generate the geometries
    geometries = []
    for cell in cellidx:
        cell_data = segfile[segfile['cell'] == cell][['x', 'y']]
        points = MultiPoint(cell_data.values)
        union = unary_union(points)
        triangles = triangulate(union)
        geometries.append({'cell': cell, 'geometry': unary_union(triangles)})
    
    # Convert to GeoDataFrame
    gdf = gpd.GeoDataFrame(geometries, geometry='geometry')
    gdf['num_transcripts'] = gdf['cell'].map(transcriptspercell.set_index('cell')['num_transcripts'])
    
    return gdf

cellgeoms_all = []
for i in range(len(fovs)):  
    cellgeoms = cellgeoms_draw(fovs[i])
    cellgeoms_all.append(cellgeoms)


cellgeoms_all_concat = pd.concat(cellgeoms_all, ignore_index=True)

cellgeoms_all_concat.to_csv('cellgeoms_all_concat.csv', index=False)
